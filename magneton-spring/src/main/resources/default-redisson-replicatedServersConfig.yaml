---
replicatedServersConfig:
  # 数据库编号, 尝试连接的数据库编号。default: 0
  database: 0
  # 连接空闲超时，单位：毫秒, default: 10000
  # 如果当前连接池里的连接数量超过了最小空闲连接数，而同时有连接空闲时间超过了该数值，那么这些连接将会自动被关闭，并从连接池里去掉。时间单位是毫秒
  idleConnectionTimeout: 10000
  # 连接超时，单位：毫秒, default: 10000
  # 同任何节点建立连接时的等待超时。时间单位是毫秒。
  connectTimeout: 10000
  # 命令等待超时，单位：毫秒, default: 3000
  # 等待节点回复命令的时间。该时间从命令发送成功时开始计时。
  timeout: 3000
  # 命令失败重试次数, default: 3
  # 如果尝试达到 retryAttempts（命令失败重试次数） 仍然不能将命令发送至某个指定的节点时，
  # 将抛出错误。如果尝试在此限制之内发送成功，则开始启用 timeout（命令等待超时） 计时。
  retryAttempts: 3
  # 命令重试发送时间间隔，单位：毫秒, default: 1500
  # 在某个节点执行相同或不同命令时，连续 失败 failedAttempts（执行失败最大次数） 时，
  # 该节点将被从可用节点列表里清除，直到 reconnectionTimeout（重新连接时间间隔） 超时以后再次尝试。
  retryInterval: 1500
  # 密码,用于节点身份验证的密码。default: null
  password: null
  # 单个连接最大订阅数量,每个连接的最大订阅数量。 default: 5
  subscriptionsPerConnection: 5
  # 客户端名称,在Redis节点里显示的客户端名称。 default: null
  clientName: null
  # 启用SSL终端识别 开启SSL终端识别能力。默认 true
  sslEnableEndpointIdentification: true
  # SSL实现方式.确定采用哪种方式（JDK或OPENSSL）来实现SSL连接。默认 JDK
  sslProvider: "JDK"
  # SSL信任证书库路径，指定SSL信任证书库的路径。默认 null
  sslTruststore: null
  # SSL信任证书库密码,指定SSL信任证书库的密码。default: null
  sslTruststorePassword: null
  # SSL钥匙库路径,指定SSL钥匙库的路径。 default: null
  sslKeystore: null
  # SSL钥匙库密码,指定SSL钥匙库的密码。default: null
  sslKeystorePassword: null
  # 负载均衡算法类的选择
  # 在使用多个Elasticache Redis服务节点的环境里，可以选用以下几种负载均衡方式选择一个节点：
  # org.redisson.connection.balancer.WeightedRoundRobinBalancer - 权重轮询调度算法
  # org.redisson.connection.balancer.RoundRobinLoadBalancer - 轮询调度算法 (默认值)
  # org.redisson.connection.balancer.RandomLoadBalancer - 随机调度算法
  loadBalancer: !<org.redisson.connection.balancer.RoundRobinLoadBalancer> { }
  # DNS监控间隔，单位：毫秒, default: 5000
  # 用来指定检查节点DNS变化的时间间隔。使用的时候应该确保JVM里的DNS数据的缓存时间保持在足够低的范围才有意义。用-1来禁用该功能。
  dnsMonitoringInterval: 5000
  # 订阅操作的负载均衡模式, default: SLAVE
  # 设置订阅操作选择节点的模式。 可用值为： SLAVE - 只在从服务节点里订阅。 MASTER - 只在主服务节点里订阅。
  subscriptionMode: "SLAVE"
  # 从节点发布和订阅连接的最小空闲连接数,default: 1
  # 多从节点的环境里，每个 从服务节点里用于发布和订阅连接的最小保持连接数（长连接）。
  # Redisson内部经常通过发布和订阅来实现许多功能。长期保持一定数量的发布订阅连接是必须的。
  subscriptionConnectionMinimumIdleSize: 1
  # 从节点发布和订阅连接池大小, default: 50
  # 多从节点的环境里，每个 从服务节点里用于发布和订阅连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
  subscriptionConnectionPoolSize: 50
  # 从节点最小空闲连接数, default: 32
  # 多从节点的环境里，每个 从服务节点里用于普通操作（非 发布和订阅）的最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时读取反映速度。
  slaveConnectionMinimumIdleSize: 32
  # 从节点连接池大小, default: 64
  # 多从节点的环境里，每个 从服务节点里用于普通操作（非 发布和订阅）连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
  slaveConnectionPoolSize: 64
  # 主节点最小空闲连接数, default: 32
  # 多从节点的环境里，每个 主节点的最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时写入反应速度。
  masterConnectionMinimumIdleSize: 32
  # 主节点连接池大小， default: 64
  # 主节点的连接池最大容量。连接池的连接数量自动弹性伸缩。
  masterConnectionPoolSize: 64
  # 读取操作的负载均衡模式, default: SLAVE
  # 注：在从服务节点里读取的数据说明已经至少有两个节点保存了该数据，确保了数据的高可用性。
  # 设置读取操作选择节点的模式。 可用值为：
  # SLAVE - 只在从服务节点里读取。 MASTER - 只在主服务节点里读取。 MASTER_SLAVE - 在主从服务节点里都可以读取。
  readMode: "SLAVE"
  # 节点地址
  # 可以通过host:port的格式来指定云托管模式的多个Redis集群节点的地址。多个节点可以一次性批量添加。所有的主从节点必须在配置阶段全部体现出来。
  nodeAddresses:
    - "redis://127.0.0.1:2812"
    - "redis://127.0.0.1:2815"
    - "redis://127.0.0.1:2813"
  # 主节点变化扫描间隔时间
  # 对主节点变化节点状态扫描的时间间隔。单位是毫秒。default: 1000
  scanInterval: 1000
# 线程池数量 默认值: 当前处理核数量 * 2
# 这个线程池数量被所有RTopic对象监听器，RRemoteService调用者和RExecutorService任务共同共享。
threads: 0
# Netty线程池数量 默认值: 当前处理核数量 * 2
# 这个线程池数量是在一个Redisson实例内，被其创建的所有分布式数据类型和服务，以及底层客户端所一同共享的线程池里保存的线程数量。
nettyThreads: 0
codec: !<org.redisson.codec.JsonJacksonCodec> { }
# 监控锁的看门狗超时，单位：毫秒 默认值：30000
# 监控锁的看门狗超时时间单位为毫秒。该参数只适用于分布式锁的加锁请求中未明确使用leaseTimeout参数的情况。
# 如果该看门口未使用lockWatchdogTimeout去重新调整一个分布式锁的lockWatchdogTimeout超时，那么这个锁将变为失效状态。
# 这个参数可以用来避免由Redisson客户端节点宕机或其他原因造成死锁的情况。
lockWatchdogTimeout: 30000
# 保持订阅发布顺序 默认值：true
# 通过该参数来修改是否按订阅发布消息的接收顺序出来消息，如果选否将对消息实行并行处理，该参数只适用于订阅发布消息的情况。
keepPubSubOrder: true
# 传输模式 默认值：TransportMode.NIO
# 可选参数：
# TransportMode.NIO,
# TransportMode.EPOLL - 需要依赖里有netty-transport-native-epoll包（Linux）
# TransportMode.KQUEUE - 需要依赖里有 netty-transport-native-kqueue包（macOS）
"transportMode": "NIO"
